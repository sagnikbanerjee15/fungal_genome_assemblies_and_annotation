#! /usr/bin/env python3


import os
import time
import glob
import argparse
import collections

from argparse import RawTextHelpFormatter

def parseCommandLineArguments():

    parser = argparse.ArgumentParser( prog = "generate_summary_statistics_from_peptides", description = """Process fasta file and generate a summary of the peptide sequences""", formatter_class = RawTextHelpFormatter )

    parser.add_argument( "--peptide_fasta", help = "Enter the peptide file in fasta format", required = True )
    parser.add_argument( "--output_filename", help = "Enter the name of the outputfile where all summary metrics will be stored", required = True )
    
    return parser.parse_args()


def readFromFastaFile(filename):
    """
    """
    
    transcripts = {}
    fhr = open(filename,"r")
    transcript_id = ""
    while True:
        line = fhr.readline()
        if not line: break
        if line[0] == ">":
            transcript_id = line.strip().split()[0][1:]
            transcripts[transcript_id] = ""
        else:
            transcripts[transcript_id] += line.strip()
    fhr.close()
    return transcripts

def distributionOfStartingAminoAcid(peptides):
    
    starting_amino_acid = [peptides[peptide_id][0] for peptide_id in peptides]
    
    return collections.Counter(starting_amino_acid)
    
def distributionOfPeptideLength(peptides):
    
    peptide_lengths = [len(peptides[peptide_id]) for peptide_id in peptides]
    
    return collections.Counter(peptide_lengths)
    
def main():
    """
    """
    options = parseCommandLineArguments()
    
    peptides = readFromFastaFile(options.peptide_fasta)
    fhw = open(options.output_filename, "w")
    starting_amino_acid_distribution = distributionOfStartingAminoAcid(peptides)
    peptide_length_distribution = distributionOfPeptideLength(peptides)
    fhw.close()
    
    
if __name__ == "__main__":
    main()