#!/usr/bin/env python3

##############################################################################################################################
#
#
##############################################################################################################################
from argparse import RawTextHelpFormatter

import os
import glob
import argparse
import sys
import math

def parseCommandLineArguments():

    parser = argparse.ArgumentParser( prog = "decompress_and_scaffold_using_p_rna_scaffolder", description = """Decompress each assembly, scaffold using prna_scaffolder and compress all the outputs""", formatter_class = RawTextHelpFormatter )

    parser.add_argument( "--compressed_assembly_file_from_abyss", help = "Enter the compressed assembly file", required = True )
    parser.add_argument( "--left_fastq", help = "Enter the left fastq file", required = True )
    parser.add_argument( "--right_fastq", help = "Enter the right fastq file", required = True )
    parser.add_argument( "--output_filename", help = "Enter the name of the outputfile in csv", required = True )
    
    parser.add_argument( "--threads", type = int, default = 1)
    return parser.parse_args()

def calculateParametersForSTARIndexGeneration(filename):
    
    fhr = open(filename,"r")
    num_chromosomes = 0
    reference_length = 0
    for line in fhr:
        if line[0]=='>':
            num_chromosomes+=1
        else:
            reference_length+=len(line.strip())
    fhr.close()
    
    genomeSAindexNbases = int(min(14, math.log2(reference_length)/2 - 1))
    genomeChrBinNbits = int(min(18,math.log2(reference_length/num_chromosomes)))
    
    return genomeSAindexNbases, genomeChrBinNbits

def main():
    """
    """
    options = parseCommandLineArguments()
    
    # Expand abyss assemblies
    cmd = f"tar -xvhf {options.compressed_assembly_file_from_abyss}"
    os.system(cmd)
    
    # Collect the abyss assemblies
    abyss_assemblies  = glob.glob("*-contigs.fa")
    
    # Scaffold each assembly
    files_for_compression = []
    for abyss_assembly in abyss_assemblies:
        k, kc = abyss_assembly.split("/")[-1].split("_")[2], abyss_assembly.split("/")[-1].split("_")[3].split("-")[0]
        print(k, kc)
        
        genomeSAindexNbases, genomeChrBinNbits = calculateParametersForSTARIndexGeneration(abyss_assembly)
        cmd  = "STAR"
        cmd += f" --runMode genomeGenerate"
        cmd += f" --genomeDir star_index"
        cmd += f" --genomeSAindexNbases {genomeSAindexNbases}"
        cmd += f" --genomeChrBinNbits {genomeChrBinNbits}"
        cmd += f" --runThreadN {options.threads}"
        cmd += f" --genomeFastaFiles {abyss_assembly}"
        os.system(cmd)
        
        cmd  = f" STAR "
        cmd += f" --genomeDir star_index "
        cmd += f" --alignIntronMax 10000"
        cmd += f" --outFilterMultimapNmax 500"
        cmd += f" --alignIntronMin 20"
        cmd += f" --outSAMtype SAM "
        cmd += f" --outFileNamePrefix abyss_"
        cmd += f" --runThreadN {options.threads}"
        cmd += f" --readFilesIn {options.left_fastq} {options.right_fastq} "
        os.system(cmd)
        
        cmd  = f" p_rna_scaffolder "
        cmd += f" -d /P_RNA_scaffolder "
        cmd += f" -i abyss_Aligned.out.sam "
        cmd += f" -j {abyss_assembly} "
        cmd += f" -F {options.left_fastq} "
        cmd += f" -R {options.right_fastq} "
        cmd += f" -t {options.threads} "
        cmd += f" -o p_rna_scaffolder_output"
        cmd += f" 1> p_rna_scaffolder_{k}_{kc}.output"
        cmd += f" 2> p_rna_scaffolder_{k}_{kc}.error"
        print(cmd)
        os.system(cmd)
        
        cmd = f"mv p_rna_scaffolder_output/P_RNA_scaffolder.fasta abyss_assembly_{k}_{kc}_p_rna_scaffolder.fasta"
        os.system(cmd)
        
        files_for_compression.append(f"abyss_assembly_{k}_{kc}_p_rna_scaffolder.fasta")
    
    cmd = f"tar -cvhf {options.output_filename} *fasta"
    os.system(cmd)

if __name__ == "__main__":
    main()